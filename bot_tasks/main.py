from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config import Config, load_config
from lexicon import LEXICON
from work_db import add_task_db, update_task_db, del_task_db, list_db

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, TYPING_CHOICE_ADD, TYPING_CHOICE_UPDATE_ID, TYPING_CHOICE_UPDATE_DESCRIPTION, TYPING_CHOICE_DEL = range(5)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    button_1 = InlineKeyboardButton(
        text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
        callback_data='button_pressed1'
    )
    button_2 = InlineKeyboardButton(
        text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
        callback_data='button_pressed2'
    )
    button_3 = InlineKeyboardButton(
        text='‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É',
        callback_data='button_pressed3'
    )
    button_4 = InlineKeyboardButton(
        text='üìí –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏',
        callback_data='button_pressed4'
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button_1], [button_2], [button_3], [button_4]]
    )

    user = update.effective_user
    await update.message.reply_html(
        text=f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! {LEXICON["/start"]}',
        reply_markup=keyboard
    )


# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def add_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'."""
    context.user_data.clear()
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(text="–í–≤–µ–¥–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å")
    return TYPING_CHOICE_ADD


async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '/add'."""
    context.user_data.clear()
    await update.message.reply_text(text="–í–≤–µ–¥–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å")
    return TYPING_CHOICE_ADD


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def update_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É'."""
    context.user_data.clear()
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(text="–í–≤–µ–¥–∏ id –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å")
    return TYPING_CHOICE_UPDATE_ID


async def update_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '/update'."""
    context.user_data.clear()
    await update.message.reply_text(text="–í–≤–µ–¥–∏ id –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å")
    return TYPING_CHOICE_UPDATE_ID


async def get_task_id_for_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º id –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
    task_id = update.message.text
    context.user_data['task_id'] = task_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ user_data
    await update.message.reply_text(text="–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return TYPING_CHOICE_UPDATE_DESCRIPTION


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async def del_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'."""
    context.user_data.clear()
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(text="–í–≤–µ–¥–∏ id –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å")
    return TYPING_CHOICE_DEL


async def del_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '/del'."""
    context.user_data.clear()
    await update.message.reply_text(text="–í–≤–µ–¥–∏ id –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å")
    return TYPING_CHOICE_DEL


# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
async def list_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üìí –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏'."""
    context.user_data.clear()
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(text="–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å:")
    await list_db(update, context)
    return ConversationHandler.END


async def list_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '/list'."""
    context.user_data.clear()
    await update.message.reply_text(text="–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å:")
    await list_db(update, context)
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –∫–æ–º–∞–Ω–¥
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –∫–æ–º–∞–Ω–¥."""
    context.user_data.clear()
    await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ —á–µ—Ä–µ–∑ /start")


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏."""
    context.user_data.clear()
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ")
    return ConversationHandler.END


def main() -> None:
    config: Config = load_config()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(config.tg_bot.token).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'
    conv_handler_add = ConversationHandler(
        entry_points=[
            CommandHandler("add", add_task_command),
            CallbackQueryHandler(add_task_button, pattern="^button_pressed1$"),
        ],
        states={
            TYPING_CHOICE_ADD: [
                MessageHandler(
                    filters.TEXT & ~(filters.COMMAND | filters.Regex("^Done$")), add_task_db),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^Done$"), done)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É'
    conv_handler_update = ConversationHandler(
        entry_points=[
            CommandHandler("update", update_task_command),
            CallbackQueryHandler(update_task_button, pattern="^button_pressed2$"),
        ],
        states={
            TYPING_CHOICE_UPDATE_ID: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND & ~filters.Regex("^Done$"),
                    get_task_id_for_update
                ),
            ],
            TYPING_CHOICE_UPDATE_DESCRIPTION: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND & ~filters.Regex("^Done$"),
                    update_task_db
                ),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^Done$"), done)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /del –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'
    conv_handler_del = ConversationHandler(
        entry_points=[
            CommandHandler("del", del_task_command),
            CallbackQueryHandler(del_task_button, pattern="^button_pressed3$"),
        ],
        states={
            TYPING_CHOICE_DEL: [
                MessageHandler(
                    filters.TEXT & ~(filters.COMMAND | filters.Regex("^Done$")), del_task_db),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^Done$"), done)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üìí –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏'
    conv_handler_list = ConversationHandler(
        entry_points=[
            CommandHandler("list", list_task_command),
            CallbackQueryHandler(list_task_button, pattern="^button_pressed4$"),
        ],
        states={},
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^Done$"), done)],
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler_add)
    application.add_handler(conv_handler_update)
    application.add_handler(conv_handler_del)
    application.add_handler(conv_handler_list)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
