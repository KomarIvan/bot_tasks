from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
import sqlite3



conn = sqlite3.connect('data.db')
cursor = conn.cursor()

cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS dialog_db(
        id_task INTEGER Primary Key AUTOINCREMENT,
        id_user_tg INTEGER,
        user_tg TEXT,
        user_first_name TEXT,
        description_task TEXT 
    )
    """
)
conn.commit()
conn.close()


async def add_task_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ tg –∏–º–µ–Ω–∏, –∏–º–µ–Ω–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
    task_text = update.message.text
    user = update.effective_user

    conn = sqlite3.connect('data.db')
    cursor = conn.cursor()

    cursor.execute(
        """
        INSERT INTO dialog_db (id_user_tg, user_tg,user_first_name, description_task)
        VALUES (?,?,?,?)
        """, (user.id, user.username, user.first_name, task_text),
    ),
    conn.commit()
    conn.close()
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ, —è –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª–∞")
    return ConversationHandler.END



async def update_task_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ id –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    task_description  = update.message.text
    task_id = context.user_data.get('task_id')
    user = update.effective_user

    conn = sqlite3.connect('data.db')
    cursor = conn.cursor()

    cursor.execute(
        """
        SELECT id_task FROM dialog_db
        WHERE id_task = ? AND id_user_tg = ?
        """,
        (task_id, user.id)
    )
    task_exists = cursor.fetchone()

    if task_exists:
        cursor.execute(
            """
            UPDATE dialog_db 
            SET description_task = ?
            WHERE id_user_tg = ? and id_task = ?
            """,
            (task_description, user.id, task_id)
        )
        conn.commit()
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ, —è –≤—Å–µ –æ–±–Ω–æ–≤–∏–ª–∞")
    else:
        await update.message.reply_text(
            "‚ùì–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ id –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            "\n\nüí°–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /list, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –∞ –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /update")
    conn.close()
    return ConversationHandler.END




async def del_task_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ id –∑–∞–¥–∞—á–∏"""
    task_text = update.message.text
    user = update.effective_user
    conn = sqlite3.connect('data.db')
    cursor = conn.cursor()

    """–£–¥–∞–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor.execute(
        """
        SELECT id_task FROM dialog_db
        WHERE id_task = ? AND id_user_tg = ?
        """,
        (task_text, user.id)
    )
    task_exists = cursor.fetchone()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º id_task –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if task_exists:
        cursor.execute(
            """
            DELETE FROM dialog_db
            WHERE id_task = ? AND id_user_tg = ?
            """,
            (task_text, user.id)
        )
        conn.commit()
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ, —è –≤—Å–µ —É–¥–∞–ª–∏–ª–∞")
    else:
        await update.message.reply_text("‚ùì–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ id –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        "\n\nüí°–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /list, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –∞ –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /update")
    conn.close()
    return ConversationHandler.END






async def list_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –î–∞–ª–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = update.effective_user

    conn = sqlite3.connect('data.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        """
        SELECT id_task, description_task FROM dialog_db WHERE id_user_tg = ?
        """, (user.id,)
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    tasks = cursor.fetchall()

    conn.close()

    """–ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å, –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å—å–º–æ —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ –∑–∞–¥–∞—á–∞–º–∏
        –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç"""
    if tasks:
        tasks_text = "\n--------------------------------------------------\n".join(
            [f"id –∑–∞–¥–∞—á–∏: {task[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task[1]}" for task in tasks]
        )
        if update.message:
            await update.message.reply_text(tasks_text)
        # –ò–Ω–∞—á–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback_query
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(tasks_text)


    else:
        if update.message:
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        # –ò–Ω–∞—á–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback_query
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
    return ConversationHandler.END

